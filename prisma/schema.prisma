generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  AWAY
  OFFLINE
  BANNED
  MUTED
  DELETED
  PENDING
  APPROVED
  REJECTED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REJECTED
}

enum TicketCategory {
  BUG
  PLAYER
  PAYMENT
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  email         String         @unique
  password      String        // Hashed password
  role          String        @default("user") // 'admin' | 'moderator' | 'helper' | 'builder' etc
  status        UserStatus    @default(PENDING)
  
  // Auth related
  emailVerified DateTime?
  verifyToken   String?       // For email verification
  resetToken    String?       // For password reset
  resetTokenExp DateTime?     // Reset token expiration
  
  // Team member fields
  description   String?       @db.Text
  socials       Json?        // { discord?: string, youtube?: string, twitter?: string }
  isStaff       Boolean      @default(false)
  staffJoinedAt DateTime?
  
  // Other fields
  joinedAt      DateTime      @default(now())
  lastSeen      DateTime?
  playtime      Int           @default(0)  // in minutes
  news News[]
  applications  Application[]
  tickets       Ticket[]      // Tickets created by the user
  assignedTickets Ticket[]    @relation("AssignedStaff")
  ticketMessages TicketMessage[]
  contents      Content[]
  suggestions   Suggestion[]
  suggestionComments SuggestionComment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([role])
  @@index([status])
  @@index([email])
  @@index([isStaff])
}

model NewsType {
  id            String         @id @default(cuid())
  name          String         @unique  // 'general' | 'event' | 'update' | 'maintenance'
  description   String?
  color         String?        // Tailwind color class or hex
  news News[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([name])
}

model News {
  id          String           @id @default(cuid())
  title       String
  content     String          @db.Text
  type        NewsType @relation(fields: [typeId], references: [id])
  typeId      String
  status      String          // 'draft' | 'published' | 'scheduled'
  priority    Boolean         @default(false)
  views       Int             @default(0)
  likes       Int             @default(0)
  scheduledFor DateTime?
  authorId    String
  author      User            @relation(fields: [authorId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([authorId])
  @@index([typeId])
  @@index([status])
}

model Application {
  id          String    @id @default(cuid())
  type        String    // 'staff' | 'builder' | 'youtuber'
  status      String    // 'pending' | 'approved' | 'rejected'
  content     Json      // Stores application form data
  notes       String?   @db.Text
  applicantId String
  applicant   User      @relation(fields: [applicantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([applicantId])
  @@index([type])
  @@index([status])
}

model Ticket {
  id          String         @id @default(cuid())
  type        String         // 'general' | 'technical' | 'payment' | 'other'
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(LOW)
  title       String
  description String         @db.Text
  category    TicketCategory @default(OTHER)
  creatorId   String
  creator     User           @relation(fields: [creatorId], references: [id])
  assignedToId String?
  assignedTo  User?          @relation("AssignedStaff", fields: [assignedToId], references: [id])
  messages    TicketMessage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([creatorId])
  @@index([assignedToId])
  @@index([status])
  @@index([type])
}

model TicketMessage {
  id          String    @id @default(cuid())
  content     String    @db.Text
  ticketId    String
  ticket      Ticket    @relation(fields: [ticketId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([ticketId])
  @@index([authorId])
}

model Suggestion {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  status      String    // 'pending' | 'approved' | 'rejected' | 'implemented'
  category    String    // 'gameplay' | 'technical' | 'community' | 'other'
  votes       Int       @default(0)
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    SuggestionComment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([status])
  @@index([category])
}

model SuggestionComment {
  id           String    @id @default(cuid())
  content      String    @db.Text
  suggestionId String
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
  authorId     String
  author       User      @relation(fields: [authorId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([suggestionId])
  @@index([authorId])
}

enum ContentType {
  TOS
  PRIVACY
  RULES
  REFUND
  GUIDELINES
  FAQ
}

model Content {
  id          String      @id @default(cuid())
  type        ContentType // Using enum instead of string
  title       String
  content     String      @db.Text
  version     Int         @default(1)
  isActive    Boolean     @default(true)
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([type])
  @@index([isActive])
}

model VoteSite {
  id          String    @id @default(cuid())
  name        String    @unique  // e.g., "Minecraft-MP", "PlanetMinecraft"
  url         String
  description String?
  rewardText  String?
  cooldown    Int       @default(24)  // Hours between votes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
}

